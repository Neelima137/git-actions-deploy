name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: runner-private  # private runner
    steps:
      - name: Clean workspace before start
        run: rm -rf ${{ github.workspace }}/*
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Maven install
        run: sudo apt install maven -y
      - name: Build with Maven
        run: mvn compile
  
  security-check:
    runs-on: runner-private  # private runner
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Trivy installation
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy 
      - name: Trivy fs scan 
        run: trivy fs . --format table -o fs-report.json

      - name: Gitleaks installation
        run: sudo apt install gitleaks -y
      - name: Git leaks code scan 
        run: gitleaks detect source . -r gitleaks-reports.json -f json

  test:
    runs-on: runner-private  # private runner
    needs: security-check
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Unit test cases 
        run: mvn test
      
  sonarqube-scan:
    runs-on: runner-private  # private runner
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Disabling shallow clones is recommended for improving the relevancy of reporting
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        continue-on-error: true
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build-project:
    runs-on: runner-private  # private runner
    needs: sonarqube-scan
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Install Maven
        run: sudo apt-get install -y maven
      - name: Build with Maven
        run: mvn package

      # Upload artifact
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar # or path/to/artifact
     
  build-docker-image-push:
    runs-on: runner-private  # private runner
    needs: build-project
    env:
      IMAGE: neelima1234/bankappactions  # Define your image name
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    # Download artifact (JAR file)
    - name: Download JAR Artifact  
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app  # Downloads the JAR to the ./app folder
    
    - name: List JAR files
      run: ls -lh app

    # Login to Docker Hub (if you're pushing to Docker Hub as well)
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
   
    # Set up QEMU for multi-platform support
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Set up Docker Buildx (used for building and pushing multi-platform images)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Set up Google Cloud Authentication
    - name: Authenticate to GCR
      run: |
        echo "${{ secrets.GKE_SA_KEY }}" | gcloud auth activate-service-account --key-file=-
        gcloud --quiet auth configure-docker

    # Build and push Docker image to GCR
    - name: Build and push Docker image to GCR
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: gcr.io/${{ secrets.GKE_PROJECT }}/${{ env.IMAGE }}:latest
        load: false  # If you want to load the image locally, set to true, but usually false for GCR
        no-cache: false  # Set to true if you want to avoid using the cache
        pull: true  # Ensure the latest base images are pulled during the build

         
  deploy-to-gke:
    runs-on: runner-private  # private runner
    needs: build-docker-image-push
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}  # Your Google Cloud project ID from secrets
      GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}  # GKE cluster name from variables
      GKE_ZONE: ${{ vars.GKE_ZONE }}  # GKE zone from variables
      DEPLOYMENT_NAME: deployment  # Kubernetes deployment name
      IMAGE: gcr.io/${{ secrets.GKE_PROJECT }}/$IMAGE  # Docker image name pushed to GCR

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker for GCP
    - name: Configure Docker for GCP
      run: gcloud auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Set up kustomize
    - name: Set up Kustomize
      run: |
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy to GKE with Kustomize
      run: |
         # Update the image in Kustomize
         ./kustomize edit set image gcr.io/${{ secrets.GKE_PROJECT }}/$IMAGE:latest

         # Build and apply the kustomize configuration to GKE
         ./kustomize build ./k8s | kubectl apply -f -

         # Check the deployment status
         kubectl rollout status deployment/$DEPLOYMENT_NAME

         # Optional: Get services to check the status
         kubectl get services -o wide
